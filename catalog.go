// Code generated by running "go generate" in golang.org/x/text. DO NOT EDIT.

package main

import (
	"golang.org/x/text/language"
	"golang.org/x/text/message"
	"golang.org/x/text/message/catalog"
)

type dictionary struct {
	index []uint32
	data  string
}

func (d *dictionary) Lookup(key string) (data string, ok bool) {
	p, ok := messageKeyToIndex[key]
	if !ok {
		return "", false
	}
	start, end := d.index[p], d.index[p+1]
	if start == end {
		return "", false
	}
	return d.data[start:end], true
}

func init() {
	dict := map[string]catalog.Dictionary{
		"en": &dictionary{index: enIndex, data: enData},
		"zh": &dictionary{index: zhIndex, data: zhData},
	}
	fallback := language.MustParse("en")
	cat, err := catalog.NewFromMap(dict, catalog.Fallback(fallback))
	if err != nil {
		panic(err)
	}
	message.DefaultCatalog = cat
}

var messageKeyToIndex = map[string]int{
	"Hello, %s":       0,
	"I want %d apple": 1,
}

var enIndex = []uint32{ // 3 elements
	0x00000000, 0x0000000d, 0x00000020,
} // Size: 36 bytes

const enData string = "\x02Hello, %[1]s\x02I want %[1]d apple"

var zhIndex = []uint32{ // 3 elements
	0x00000000, 0x0000000e, 0x00000028,
} // Size: 36 bytes

const zhData string = "\x02你好, %[1]s\x02我想要 %[1]d 个苹果"

// Total table size 144 bytes (0KiB); checksum: D67C2D39
