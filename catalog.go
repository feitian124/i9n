// Code generated by running "go generate" in golang.org/x/text. DO NOT EDIT.

package main

import (
	"golang.org/x/text/language"
	"golang.org/x/text/message"
	"golang.org/x/text/message/catalog"
)

type dictionary struct {
	index []uint32
	data  string
}

func (d *dictionary) Lookup(key string) (data string, ok bool) {
	p, ok := messageKeyToIndex[key]
	if !ok {
		return "", false
	}
	start, end := d.index[p], d.index[p+1]
	if start == end {
		return "", false
	}
	return d.data[start:end], true
}

func init() {
	dict := map[string]catalog.Dictionary{
		"el": &dictionary{index: elIndex, data: elData},
		"en": &dictionary{index: enIndex, data: enData},
	}
	fallback := language.MustParse("en")
	cat, err := catalog.NewFromMap(dict, catalog.Fallback(fallback))
	if err != nil {
		panic(err)
	}
	message.DefaultCatalog = cat
}

var messageKeyToIndex = map[string]int{
	"Hello world!": 0,
}

var elIndex = []uint32{ // 2 elements
	0x00000000, 0x0000001a,
} // Size: 32 bytes

const elData string = "\x02Γιά σου Κόσμε!"

var enIndex = []uint32{ // 2 elements
	0x00000000, 0x0000000d,
} // Size: 32 bytes

const enData string = "\x02Hello world!"

// Total table size 103 bytes (0KiB); checksum: D8481C97
